{"version":3,"sources":["components/JourneyBuilder/components/blocks.tsx","helper/util.js","components/JsonBuilder/index.tsx","components/JourneyBuilder/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConditionBlock","props","yes","no","Fragment","className","Block","key","id","structure","method","next","onClick","onDelete","onAdd","iterator","insertAfterId","o","step","current","findById","result","p","includes","hasOwnProperty","newNode","Math","random","toString","substr","undefined","deleteId","parent","findParentByChildId","alert","JsonBuilder","theme","shouldExpandNode","data","mapping","JourneyBuilderTable","initialMapping","useState","setMapping","Object","assign","Home","App","path","component","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9475d60f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './blocks.scss';\n\nexport function ConditionBlock(props: any) {\n  const { yes, no } = props;\n  return (\n    <React.Fragment>\n      <div className=\"block-condition\">\n        <div className=\"block-condition__branch yes\">\n          {yes && <Block key={yes.id} {...props} structure={yes}/>}\n        </div>\n        <div className=\"block-condition__branch no\">\n          {no && <Block key={no.id} {...props} structure={no}/>}\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport function Block(props: any) {\n  const { method, next, yes, no, id } = props.structure;\n  return (\n    <React.Fragment>\n      {/* Block Info */}\n      <div className=\"block\">\n        <div className=\"block__content\">\n          <p className=\"delete\" onClick={() => props.onDelete(id)}> X </p>\n          <p> {method} </p>\n        </div>\n        {method === 'condition' ? (\n          <div className=\"add-condition\">\n            <div className=\"add-condition__choice yes\" onClick={() => props.onAdd(id, 'yes')}>Yes +</div>\n            <div className=\"add-condition__choice no\" onClick={() => props.onAdd(id, 'no')}>No +</div>\n          </div>\n        ) : (\n          <div className=\"add\" onClick={() => props.onAdd(id, 'next')}>+</div>\n        )}\n      </div>\n      {/* Recursive Chain Call */}\n      {method === 'condition' && (yes || no ) && <ConditionBlock key={id} {...props} yes={yes} no={no}/>}\n      {method !== 'condition' && next && <Block key={next.id} {...props} structure={next}/>}\n    </React.Fragment>\n  )\n}\n","\nconst iterator = ['next', 'yes', 'no'];\n\nfunction uniqueID() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\n// Return the node with matching id\nexport function findById(o, id) {\n  if (o.id === id) return o;\n  var result, p;\n  for (p in o) {\n    if (iterator.includes(p) && o.hasOwnProperty(p) && typeof o[p] === 'object') {\n      result = findById(o[p], id);\n      if (result) {\n        return result;\n      }\n    }\n  }\n}\n\n// Return the parent node of a child with matching id\nexport function findParentByChildId(o, id) {\n  if (o.method === 'condition') {\n    if (o.hasOwnProperty('yes') && o.yes && o.yes.id === id) return o;\n    if (o.hasOwnProperty('no') && o.no && o.no.id === id) return o;\n  } else {\n    if (o.hasOwnProperty('next') && o.next && o.next.id === id) return o;\n  }\n\n  var result, p;\n  for (p in o) {\n    if (iterator.includes(p) && o.hasOwnProperty(p) && typeof o[p] === 'object') {\n      result = findParentByChildId(o[p], id);\n      if (result) {\n        return result;\n      }\n    }\n  }\n}\n\nexport function insertAfterId(o, id, step) {\n  var current = findById(o, id);\n\n  // TODO.\n  // Add dynamic data generation logic here\n  let newNode = {\n    id: uniqueID(),\n    method: 'NEW',\n    next: undefined,\n  }\n\n  newNode.next = current[step];\n  current[step] = newNode;\n}\n\nexport function deleteId(o, id) {\n  if (id === o.id) {\n    alert('you cannot delete the root');\n    return;\n  }\n  var parent = findParentByChildId(o, id);\n  if (parent.hasOwnProperty('next')) {\n    parent.next = undefined;\n  } else if (parent.hasOwnProperty('yes') && parent.yes && parent.yes.id === id) {\n    parent.yes = undefined;\n  } else {\n    parent.no = undefined;\n  }\n}\n","\nimport React from 'react';\nimport JSONTree from 'react-json-tree';\n\nexport default function JsonBuilder(props: any) {\n  return (\n    <JSONTree\n      theme={'monokai'}\n      shouldExpandNode={(props: any) => true}\n      data={props.mapping}/>\n  )\n}","\nimport React, { useState } from 'react';\nimport { Block } from './components/blocks';\nimport { insertAfterId, deleteId } from 'helper/util';\n\nimport JSONBuilder from 'components/JsonBuilder';\nimport './journeyBuilder.scss';\n\nexport default function JourneyBuilderTable() {\n\n  const initialMapping = {\n    id: 1,\n    method: 'trigger',\n    data: {\n    },\n    next: {\n      id: 2,\n      method: 'email',\n      data: {\n      },\n      next: {\n        id: 3,\n        method: 'condition',\n        data: {\n        },\n        yes: {\n          id: 4,\n          method: 'email',\n          data: {\n          },\n          next: {\n            id: 5,\n            method: 'delay2 ',\n            data: {\n            },\n            next: undefined\n          }\n        },\n        no: {\n          id: 6,\n          method: 'delay',\n          data: {\n          },\n          next: {\n            id: 7,\n            method: 'condition',\n            data: {\n            },\n            yes: {\n              id: 8,\n              method: 'webhook',\n              data: {},\n              next: undefined,\n            },\n            no: {\n              id: 9,\n              method: 'experience',\n              data: {},\n              next: undefined\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const [mapping, setMapping] = useState(initialMapping);\n\n  // Will mutate mappings to correctly handle the invoked action, and set it back to react's state.\n  function onHandleAdd(id: any, step: any) {\n    insertAfterId(mapping, id, step);\n    setMapping(Object.assign({}, mapping));\n  }\n\n  function onHandleDelete(id: any) {\n    deleteId(mapping, id);\n    setMapping(Object.assign({}, mapping));\n  }\n\n  return (\n    <div className=\"journey-builder\">\n      <div className=\"journey-diagram\">\n        <div className=\"center\">\n        <Block\n          structure={mapping}\n          onAdd={onHandleAdd}\n          onDelete={onHandleDelete}/>\n        </div>\n      </div>\n      <div className=\"json-viewer\">\n        <JSONBuilder mapping={mapping} />\n      </div>\n    </div>\n  )\n}\n","\nimport React from 'react';\nimport JourneyBuilder from 'components/JourneyBuilder';\n\nimport './home.scss';\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      <h2> Journey Builder Proof of Concept </h2>\n      <JourneyBuilder/>\n    </div>\n  )\n}","import React from 'react';\nimport { Switch, Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router';\nimport { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}